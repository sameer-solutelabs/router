{"ast":null,"code":"var _jsxFileName = \"/home/sameer/projects/demo/Routing-Project/frontend/src/pages/EventsPage.js\",\n  _s = $RefreshSig$();\nimport { useLoaderData } from 'react-router-dom';\nimport EventsList from '../components/EventsList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const data = useLoaderData();\n  if (data.isError) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n  const events = data.events;\n  return /*#__PURE__*/_jsxDEV(EventsList, {\n    events: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport async function loader() {\n  const response = await fetch('http://localhost:8080/eventsasdadasd');\n  if (!response.ok) {\n    // return {isError: true,message : 'could not fetch event.'}\n    throw new Response(JSON.stringify({\n      message: 'Could not fetch event.'\n    }), {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["useLoaderData","EventsList","EventsPage","data","isError","message","events","loader","response","fetch","ok","Response","JSON","stringify","status"],"sources":["/home/sameer/projects/demo/Routing-Project/frontend/src/pages/EventsPage.js"],"sourcesContent":["import { useLoaderData } from 'react-router-dom';\n\nimport EventsList from '../components/EventsList';\n\nfunction EventsPage() {\n  const data = useLoaderData();\n\n  if(data.isError){\n    return <p>{data.message}</p>    \n  }\n\n  const events = data.events;\n\n  return <EventsList events={events} />;\n}\n\n\nexport default EventsPage;\n\n\nexport async function loader(){\n  const response = await fetch('http://localhost:8080/eventsasdadasd');\n\n  if (!response.ok) {    \n    // return {isError: true,message : 'could not fetch event.'}\n    throw new Response(JSON.stringify({message:'Could not fetch event.'}),{\n      status:500,\n    });\n      \n  } else {   \n    return response;\n  }  \n\n}"],"mappings":";;AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAEhD,OAAOC,UAAU,MAAM,0BAA0B;AAAC;AAElD,SAASC,UAAU,GAAG;EAAA;EACpB,MAAMC,IAAI,GAAGH,aAAa,EAAE;EAE5B,IAAGG,IAAI,CAACC,OAAO,EAAC;IACd,oBAAO;MAAA,UAAID,IAAI,CAACE;IAAO;MAAA;MAAA;MAAA;IAAA,QAAK;EAC9B;EAEA,MAAMC,MAAM,GAAGH,IAAI,CAACG,MAAM;EAE1B,oBAAO,QAAC,UAAU;IAAC,MAAM,EAAEA;EAAO;IAAA;IAAA;IAAA;EAAA,QAAG;AACvC;AAAC,GAVQJ,UAAU;EAAA,QACJF,aAAa;AAAA;AAAA,KADnBE,UAAU;AAanB,eAAeA,UAAU;AAGzB,OAAO,eAAeK,MAAM,GAAE;EAC5B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAsC,CAAC;EAEpE,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IAChB;IACA,MAAM,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAACR,OAAO,EAAC;IAAwB,CAAC,CAAC,EAAC;MACpES,MAAM,EAAC;IACT,CAAC,CAAC;EAEJ,CAAC,MAAM;IACL,OAAON,QAAQ;EACjB;AAEF;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}